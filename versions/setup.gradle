import com.github.hexomod.macro.PreprocessorPlugin

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.hexomod:MacroPreprocessor:0.9"
    }
}

apply plugin: JavaPlugin
apply plugin: PreprocessorPlugin

static def parseVersion(version, undefined) {
    // if is a limiter, ignore.
    def value = 0
    if (version.startsWith("(") || version.endsWith(")")) {
        if (version.size() == 1) {
            return undefined;
        }
        value = -1
    }
    // remove all limiter if needs.
    version = version.replaceAll("[()\\[\\]]", "")
    def (major, minor, patch) = version.tokenize('-')[0].tokenize('.')
    return "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int + value
}

static def parseVersionFromFile(file) {
    // only process the source file.
    if (file.name.endsWithAny(".java", ".tj")) {
        // read version range in the file.
        def regex = ~/@Available\((\s*value\s*=)?\s*"(.+)"\s*\)/
        def results = file.getText("UTF-8") =~ regex
        if (results.size() != 0) {
            def range = results[0][2].split(",\\s*")
            if (range.size() == 1) {
                range = [range[0], range[0]]
            }
            return [parseVersion(range[0], 0), parseVersion(range[1], Integer.MAX_VALUE)]
        }
    }
    return null
}

static def parseMinecraftVersion(file) {
    def properties = new Properties()
    properties.load(file.newDataInputStream())
    return properties.minecraft_version
}

// we needs convert the version to number, for example: 1.16.5 => 11605.
def minecraft_version = rootDir.getName()
def minecraft_version_last = parseMinecraftVersion(file("../../gradle.properties"))
def minecraft_version_number = parseVersion(minecraft_version, 0)

def targets = ["common", "forge", "fabric"]

targets.forEach {
    sourceSets.register(it) {
        it.java.srcDirs("../../${it.name}/src/main/java")
        it.resources.srcDirs("../../${it.name}/src/main/resources")
        it.java.srcDirs("../library/${it.name}/src/main/java")
        it.resources.srcDirs("../library/${it.name}/src/main/resources")
    }
}

macroPreprocessorSettings {
    inPlace = true
    remove = true
    vars = [MC: minecraft_version_number]
    com.github.hexomod.macro.Preprocessor.SLASH_KEYWORDS.put("comment", "//#")
}

task switchCoreSource {
    sourceSets.forEach {
        def sourceSet = it
        sourceSet.allSource.forEach {
            def range = parseVersionFromFile(it)
            if (range != null) {
                def name = it.name
                if (minecraft_version_number >= range[0] && minecraft_version_number <= range[1]) {
                    name = name.replaceAll(/\.tj/, /.java/)
                } else {
                    name = name.replaceAll(/\.java$/, /.tj/)
                }
                if (name != it.name) {
                    def file = new File(it.parentFile, name)
                    println "Switch ${it.name}"
                    it.renameTo(file)
                }
            }
        }
    }
}

task applyCoreSources {
    dependsOn "macroPreprocessorJava"
    dependsOn "macroPreprocessorResource"
    dependsOn "applyCoreProperties"
    doLast {
        println "Minecraft Version: ${minecraft_version}(${minecraft_version_number})"
    }
}

task applyCoreProperties {
    def rootPath = rootDir.absolutePath
    fileTree(rootPath).matching { include "**/*.properties" }.forEach {
        def target = new File(rootDir, "../../${it.absolutePath.replace(rootPath, "")}")
        def contents = target.getText("UTF-8")
        def properties = new Properties()
        properties.load(it.newDataInputStream())
        properties.forEach { key, value ->
            contents = contents.replaceAll("${key}=[^#\\n]*", "${key}=${value}")
        }
        target.write(contents, "UTF-8")
    }
}

task applyCoreConfigurations {
    doLast {
        def target = "../../.idea/runConfigurations"
        ant.move(file: file(target), tofile: file(target + "-${minecraft_version_last}"), failonerror: false, quiet: true)
        ant.move(file: file(target + "-${minecraft_version}"), tofile: file(target), failonerror: false, quiet: true)
    }
}

defaultTasks("switchCoreSource", "applyCoreSources", "applyCoreConfigurations")
