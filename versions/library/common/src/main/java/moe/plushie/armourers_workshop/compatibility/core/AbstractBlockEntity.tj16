package moe.plushie.armourers_workshop.compatibility.core;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.common.IBlockEntityHandler;
import moe.plushie.armourers_workshop.api.data.IDataSerializer;
import moe.plushie.armourers_workshop.compatibility.core.data.AbstractDataSerializer;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockState;

import java.util.function.DoubleSupplier;

@Available("[1.16, 1.18)")
public abstract class AbstractBlockEntity extends BlockEntity implements IBlockEntityHandler {

    private DoubleSupplier viewDistanceProvider;

    public AbstractBlockEntity(BlockEntityType<?> blockEntityType, BlockPos blockPos, BlockState blockState) {
        super(blockEntityType);
    }

    public abstract void readAdditionalData(IDataSerializer serializer);

    public abstract void writeAdditionalData(IDataSerializer serializer);

    public abstract void sendBlockUpdates();

    @Override
    public void load(BlockState state, CompoundTag tag) {
        super.load(state, tag);
        this.readAdditionalData(AbstractDataSerializer.wrap(tag, null));
    }

    @Override
    public CompoundTag save(CompoundTag tag) {
        super.save(tag);
        this.writeAdditionalData(AbstractDataSerializer.wrap(tag, null));
        return tag;
    }

    @Override
    public ClientboundBlockEntityDataPacket getUpdatePacket() {
        CompoundTag tag = new CompoundTag();
        this.writeAdditionalData(AbstractDataSerializer.wrap(tag, null));
        return new ClientboundBlockEntityDataPacket(this.worldPosition, 0, tag);
    }

    @Override
    public void handleUpdatePacket(BlockState state, IDataSerializer serializer) {
        this.readAdditionalData(serializer);
        this.sendBlockUpdates();
    }

    @Override
    public CompoundTag getUpdateTag() {
        return this.saveFullData(null);
    }

    @Override
    @Environment(EnvType.CLIENT)
    public double getViewDistance() {
        if (viewDistanceProvider == null) {
            viewDistanceProvider = createViewDistanceProvider();
        }
        return viewDistanceProvider.getAsDouble();
    }
}
