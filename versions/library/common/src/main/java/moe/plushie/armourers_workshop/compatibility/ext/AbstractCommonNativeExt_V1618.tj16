package moe.plushie.armourers_workshop.compatibility.ext;

import com.google.gson.JsonObject;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.common.IArgumentSerializer;
import moe.plushie.armourers_workshop.api.common.IArgumentType;
import moe.plushie.armourers_workshop.api.common.IResourceManager;
import moe.plushie.armourers_workshop.init.provider.CommonNativeFactory;
import moe.plushie.armourers_workshop.init.provider.CommonNativeProvider;
import net.minecraft.commands.synchronization.ArgumentSerializer;
import net.minecraft.commands.synchronization.ArgumentTypes;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.resources.Resource;
import net.minecraft.server.packs.resources.ResourceManager;

import java.io.IOException;
import java.io.InputStream;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;

@Available("[1.16, 1.19)")
public interface AbstractCommonNativeExt_V1618 extends CommonNativeProvider, CommonNativeFactory {

    @Override
    default void willRegisterArgument(Consumer<CommonNativeProvider.ArgumentRegistry> consumer) {
        consumer.accept(ArgumentSerializer68::register);
    }

    @Override
    default IResourceManager createResourceManager(ResourceManager resourceManager) {
        return new IResourceManager() {
            @Override
            public boolean hasResource(ResourceLocation resourceLocation) {
                return resourceManager.hasResource(resourceLocation);
            }

            @Override
            public InputStream readResource(ResourceLocation resourceLocation) throws IOException {
                return resourceManager.getResource(resourceLocation).getInputStream();
            }

            @Override
            public void readResources(ResourceLocation target, Predicate<String> validator, BiConsumer<ResourceLocation, InputStream> consumer) {
                for (ResourceLocation key : resourceManager.listResources(target.getPath(), validator)) {
                    try {
                        if (!key.getNamespace().equals(target.getNamespace())) {
                            return;
                        }
                        for (Resource resource : resourceManager.getResources(key)) {
                            try {
                                InputStream inputStream = resource.getInputStream();
                                consumer.accept(key, inputStream);
                                inputStream.close();
                            } catch (Exception exception) {
                                exception.printStackTrace();
                            }
                        }
                    } catch (Exception exception) {
                        exception.printStackTrace();
                    }
                }
            }
        };
    }

    class ArgumentSerializer68<A extends IArgumentType<?>> implements ArgumentSerializer<A> {

        private final IArgumentSerializer<A> serializer;

        public ArgumentSerializer68(IArgumentSerializer<A> serializer) {
            this.serializer = serializer;
        }

        public static <T extends IArgumentType<?>> void register(ResourceLocation registryName, Class<T> argumentType, IArgumentSerializer<T> argumentSerializer) {
            ArgumentTypes.register(registryName.toString(), argumentType, new ArgumentSerializer68<>(argumentSerializer));
        }


        @Override
        public void serializeToNetwork(A argumentType, FriendlyByteBuf friendlyByteBuf) {
            serializer.serializeToNetwork(argumentType, friendlyByteBuf);
        }

        @Override
        public A deserializeFromNetwork(FriendlyByteBuf friendlyByteBuf) {
            return serializer.deserializeFromNetwork(friendlyByteBuf);
        }

        @Override
        public void serializeToJson(A argumentType, JsonObject jsonObject) {
            serializer.serializeToJson(argumentType, jsonObject);
        }
    }

}
