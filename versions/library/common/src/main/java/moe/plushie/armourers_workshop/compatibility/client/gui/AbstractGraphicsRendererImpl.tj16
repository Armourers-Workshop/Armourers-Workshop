package moe.plushie.armourers_workshop.compatibility.client.gui;

import com.apple.library.impl.EntityRendererImpl;
import com.mojang.blaze3d.vertex.PoseStack;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.compatibility.client.AbstractPoseStack;
import moe.plushie.armourers_workshop.utils.RenderSystem;
import moe.plushie.armourers_workshop.utils.math.OpenQuaternionf;
import moe.plushie.armourers_workshop.utils.math.Vector3f;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.screens.inventory.InventoryScreen;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.EntityRenderDispatcher;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;

@Available("[1.16, 1.18)")
@Environment(EnvType.CLIENT)
public class AbstractGraphicsRendererImpl {

    private static final EntityRendererImpl<LivingEntity> DEFAULT_ENTITY_RENDERER = (entity, origin, scale, focus, context) -> {
        // forward to vanilla implements.
        RenderSystem.pushMatrix();
        RenderSystem.multMatrix(AbstractGraphicsRenderer.of(context).last().pose());
        RenderSystem.translatef(origin.x, origin.y, 0);
        InventoryScreen.renderEntityInInventory(0, 0, scale, focus.x, focus.y, entity);
        RenderSystem.popMatrix();
    };

    private static final EntityRendererImpl<Entity> CUSTOM_ENTITY_RENDERER = (entity, origin, scale, focus, context) -> {
        RenderSystem.pushMatrix();
        RenderSystem.multMatrix(AbstractGraphicsRenderer.of(context).last().pose());
        RenderSystem.translatef(origin.x, origin.y, 1050.0f);
        RenderSystem.scalef(1, 1, -1);

        // custom entity renderer from the InventoryScreen.renderEntityInInventory
        float h = (float) Math.atan(focus.getX() / 40.0F);
        float l = (float) Math.atan(focus.getY() / 40.0F);
        PoseStack poseStack = new PoseStack();
        poseStack.translate(0.0, 0.0, 1000.0);
        poseStack.scale(scale, scale, scale);
        OpenQuaternionf quaternion = Vector3f.ZP.rotationDegrees(180.0f);
        OpenQuaternionf quaternion2 = Vector3f.XP.rotationDegrees(l * 20.0f);
        quaternion.mul(Vector3f.YP.rotationDegrees(180.0f));
        quaternion.mul(quaternion2);
        poseStack.mulPose(quaternion);
        //float m = livingEntity.yBodyRot;
        float n = entity.yRot;
        float o = entity.xRot;
        //float p = livingEntity.yHeadRotO;
        //float q = livingEntity.yHeadRot;
        //livingEntity.yBodyRot = 180.0F + h * 20.0F;
        entity.yRot = h * 40.0F;
        entity.xRot = -l * 20.0F;
        //livingEntity.yHeadRot = livingEntity.yRot;
        //livingEntity.yHeadRotO = livingEntity.yRot;
        EntityRenderDispatcher entityRenderDispatcher = Minecraft.getInstance().getEntityRenderDispatcher();
        quaternion2.conjugate();
        entityRenderDispatcher.overrideCameraOrientation(AbstractPoseStack.copyQuaternion(quaternion2));
        entityRenderDispatcher.setRenderShadow(false);
        MultiBufferSource.BufferSource bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();
        RenderSystem.runAsFancy(() -> {
            entityRenderDispatcher.render(entity, 0.0, 0.0, 0.0, 0.0F, 1.0F, poseStack, bufferSource, 15728880);
        });
        bufferSource.endBatch();
        entityRenderDispatcher.setRenderShadow(true);
        //livingEntity.yBodyRot = m;
        entity.yRot = n;
        entity.xRot = o;
        //livingEntity.yHeadRotO = p;
        //livingEntity.yHeadRot = q;

        RenderSystem.popMatrix();
    };

    @SuppressWarnings("unchecked")
    public static <T extends Entity> EntityRendererImpl<T> getRenderer(T entity) {
        if (entity instanceof LivingEntity) {
            return (EntityRendererImpl<T>) DEFAULT_ENTITY_RENDERER;
        }
        return (EntityRendererImpl<T>) CUSTOM_ENTITY_RENDERER;
    }
}
