package moe.plushie.armourers_workshop.compatibility.core.data;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.core.client.texture.SmartResourceManager;
import moe.plushie.armourers_workshop.utils.ext.OpenResourceLocation;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.FilePackResources;
import net.minecraft.server.packs.FolderPackResources;
import net.minecraft.server.packs.PackResources;
import net.minecraft.server.packs.PackType;
import net.minecraft.server.packs.metadata.MetadataSectionSerializer;
import org.jetbrains.annotations.Nullable;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;
import java.util.function.Predicate;

@Available("[1.19, 1.20)")
public class AbstractPackResources implements PackResources {

    private final String id;
    private final SmartResourceManager resourceManager;

    public AbstractPackResources(SmartResourceManager resourceManager, PackType packType) {
        this.id = resourceManager.getId();
        this.resourceManager = resourceManager;
    }

    public static boolean isModResources(PackResources resources) {
        return !(resources instanceof FilePackResources || resources instanceof FolderPackResources);
    }

    @Override
    public Set<String> getNamespaces(PackType packType) {
        return resourceManager.getNamespaces(packType);
    }

    @Override
    public final InputStream getRootResource(String path) throws IOException {
        throw new FileNotFoundException(path);
    }

    @Override
    public final InputStream getResource(PackType packType, ResourceLocation location) throws IOException {
        var supplier = resourceManager.getResource(packType, OpenResourceLocation.create(location));
        if (supplier != null) {
            return supplier.get();
        }
        throw new FileNotFoundException(location.getPath());
    }

    @Override
    public Collection<ResourceLocation> getResources(PackType packType, String namespace, String path, Predicate<ResourceLocation> predicate) {
        return Collections.emptyList();
    }

    @Override
    public boolean hasResource(PackType packType, ResourceLocation location) {
        var supplier = resourceManager.getResource(packType, OpenResourceLocation.create(location));
        return supplier != null;
    }

    @Nullable
    @Override
    public final <T> T getMetadataSection(MetadataSectionSerializer<T> metadataSectionSerializer) throws IOException {
        return null;
    }

    @Override
    public final String getName() {
        return id;
    }

    @Override
    public void close() {
        // reload or quit.
    }
}
