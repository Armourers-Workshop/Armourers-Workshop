package moe.plushie.armourers_workshop.compatibility;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.compatibility.client.model.AbstractSkinnableModels;
import moe.plushie.armourers_workshop.utils.ModelHolder;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.ListModel;
import net.minecraft.client.model.geom.ModelPart;

import java.util.List;

@Available("[1.16, 1.18)")
public abstract class AbstractModelPartRegistries {

    public static void init() {

        ModelHolder.register(EntityModel.class, (model, it) -> {
            // noop
        });

        ModelHolder.register(ListModel.class, (model, it) -> {
            it.unnamed(model.parts());
        });

        ModelHolder.register(AbstractSkinnableModels.HUMANOID, (model, it) -> {
            it.put("hat", model.hat);
            it.put("head", model.head);
            it.put("body", model.body);
            it.put("left_arm", model.leftArm);
            it.put("right_arm", model.rightArm);
            it.put("left_leg", model.leftLeg);
            it.put("right_leg", model.rightLeg);
        });
        ModelHolder.register(AbstractSkinnableModels.PLAYER, (model, it) -> {
            it.put("left_sleeve", model.leftSleeve);
            it.put("right_sleeve", model.rightSleeve);
            it.put("left_pants", model.leftPants);
            it.put("right_pants", model.rightPants);
            it.put("jacket", model.jacket);
        });

        ModelHolder.register(AbstractSkinnableModels.VILLAGER, (model, it) -> {
            it.put("hat", model.hat);
            it.put("hat_rim", model.hatRim);
            it.put("head", model.head);
            it.put("nose", model.nose);
            it.put("body", model.body);
            it.put("left_arm", model.arms);
            it.put("right_arm", model.arms);
            it.put("left_leg", model.leg1);
            it.put("right_leg", model.leg0);
            it.put("jacket", model.jacket);
        });

        ModelHolder.register(AbstractSkinnableModels.ILLAGER, (model, it) -> {
            it.put("hat", model.hat);
            it.put("head", model.head);
            it.put("body", model.body);
            it.put("left_arm", model.leftArm);
            it.put("right_arm", model.rightArm);
            it.put("left_leg", model.leftLeg);
            it.put("right_leg", model.rightLeg);
            it.put("arms", model.arms);
        });


        ModelHolder.register(AbstractSkinnableModels.HORSE, (model, it) -> {
            it.put("head", model.headParts);
            it.put("body", model.body);
            it.put("left_hind_leg", model.leg1);
            it.put("right_hind_leg", model.leg2);
            it.put("left_front_leg", model.leg3);
            it.put("right_front_leg", model.leg4);
            it.put("left_front_baby_leg", model.babyLeg1);
            it.put("right_front_baby_leg", model.babyLeg2);
            it.put("left_hind_baby_leg", model.babyLeg3);
            it.put("right_hind_baby_leg", model.babyLeg4);
            it.put("tail", model.tail);
        });

        ModelHolder.register(AbstractSkinnableModels.IRON_GOLEM, (model, it) -> {
            it.put("head", model.head);
            it.put("body", model.body);
            it.put("left_arm", model.arm1);
            it.put("right_arm", model.arm0);
            it.put("left_leg", model.leg1);
            it.put("right_leg", model.leg0);
        });

        ModelHolder.register(AbstractSkinnableModels.CHICKEN, (model, it) -> {
            it.put("head", model.head);
//            it.put("body", model.body);
            it.put("beak", model.beak);
            it.put("red_thing", model.redThing);
//            it.put("left_leg", model.leg1);
//            it.put("right_leg", model.leg0);
//            it.put("left_wing", model.wing1);
//            it.put("right_wing", model.wing0);
        });

        ModelHolder.register(AbstractSkinnableModels.CREEPER, (model, it) -> {
            it.put("head", model.head);
            it.put("hair", model.hair);
        });

        ModelHolder.register(AbstractSkinnableModels.BOAT, (model, it) -> {
            List<ModelPart> parts = model.parts();
            it.put("bottom", parts.get(0));
            it.put("back", parts.get(1));
            it.put("front", parts.get(2));
            it.put("right", parts.get(3));
            it.put("left", parts.get(4));
            it.put("left_paddle", parts.get(5));
            it.put("right_paddle", parts.get(6));
        });

    }
}
