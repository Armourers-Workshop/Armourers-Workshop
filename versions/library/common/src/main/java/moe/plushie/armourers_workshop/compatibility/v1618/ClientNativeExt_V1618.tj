package moe.plushie.armourers_workshop.compatibility.v1618;

import com.mojang.blaze3d.vertex.BufferBuilder;
import com.mojang.datafixers.util.Pair;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.client.IBufferBuilder;
import moe.plushie.armourers_workshop.api.client.IRenderedBuffer;
import moe.plushie.armourers_workshop.api.common.IResourceManager;
import moe.plushie.armourers_workshop.init.provider.ClientNativeFactory;
import moe.plushie.armourers_workshop.init.provider.ClientNativeProvider;
import net.minecraft.client.Minecraft;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.packs.resources.ResourceManager;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

@Available("[1.16, 1.19)")
public interface ClientNativeExt_V1618 extends ClientNativeProvider, ClientNativeFactory {

    @Override
    default IBufferBuilder createBuilderBuffer(int size) {
        BufferBuilder bufferBuilder = new BufferBuilder(size);
        return new IBufferBuilder() {
            @Override
            public BufferBuilder asBufferBuilder() {
                return bufferBuilder;
            }

            @Override
            public IRenderedBuffer end() {
                bufferBuilder.end();
                Pair<BufferBuilder.DrawState, ByteBuffer> pair = bufferBuilder.popNextBuffer();
                return new IRenderedBuffer() {
                    @Override
                    public ByteBuffer vertexBuffer() {
                        return pair.getSecond();
                    }

                    @Override
                    public BufferBuilder.DrawState drawState() {
                        return pair.getFirst();
                    }
                };
            }
        };
    }

    @Override
    default IResourceManager getResourceManager() {
        ResourceManager resourceManager = Minecraft.getInstance().getResourceManager();
        return new IResourceManager() {
            @Override
            public boolean hasResource(ResourceLocation resourceLocation) {
                return resourceManager.hasResource(resourceLocation);
            }

            @Override
            public InputStream readResource(ResourceLocation resourceLocation) throws IOException {
                return resourceManager.getResource(resourceLocation).getInputStream();
            }
        };
    }

}
