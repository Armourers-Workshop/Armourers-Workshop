package moe.plushie.armourers_workshop.compatibility;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.compatibility.client.AbstractPoseStack;
import moe.plushie.armourers_workshop.core.client.other.VertexBufferObject;
import moe.plushie.armourers_workshop.core.client.other.VertexIndexObject;
import moe.plushie.armourers_workshop.core.client.shader.Shader;
import moe.plushie.armourers_workshop.core.client.shader.ShaderVertexGroup;
import moe.plushie.armourers_workshop.core.client.shader.ShaderVertexObject;
import moe.plushie.armourers_workshop.utils.RenderSystem;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import org.lwjgl.opengl.GL15;

@Available("[1.16, 1.18)")
@Environment(EnvType.CLIENT)
public class AbstractShader extends Shader {

    private int maxVertexCount;

    @Override
    public void begin() {
        super.begin();
        RenderSystem.enableRescaleNormal();
    }

    @Override
    public void end() {
        RenderSystem.disableRescaleNormal();
        super.end();
    }

    @Override
    protected void prepare(ShaderVertexGroup group) {
        super.prepare(group);
        group.getRenderType().setupRenderState();
        maxVertexCount = group.maxVertexCount;
    }

    @Override
    protected void clean(ShaderVertexGroup group) {
        VertexIndexObject.unbind();
        VertexBufferObject.unbind();
        group.getRenderType().clearRenderState();
        super.clean(group);
    }

    @Override
    public void render(ShaderVertexObject object) {
        var count = object.getTotal();
        var poseStack = object.getPoseStack();

        RenderSystem.pushMatrix();
        RenderSystem.multMatrix(AbstractPoseStack.convertMatrix(poseStack.last().pose()));

        // https://sites.google.com/site/threejstuts/home/polygon_offset
        // For polygons that are parallel to the near and far clipping planes, the depth slope is zero.
        // For the polygons in your scene with a depth slope near zero, only a small, constant offset is needed.
        // To create a small, constant offset, you can pass factor = 0.0 and units = 1.0.
        RenderSystem.polygonOffset(0, object.getPolygonOffset() * -1);

        object.getBufferObject().bind();
        object.getFormat().setupBufferState(object.getOffset());
        object.getIndexObject().bind();

        if (!object.isGrowing()) {
            var lightBuffer = AbstractLightBufferObject.getLightBuffer(object.getLightmap());
            lightBuffer.ensureCapacity(maxVertexCount);
            lightBuffer.bind();
            lightBuffer.getFormat().setupBufferState(0L);
            object.getBufferObject().bind();
        }

        GL15.glDrawElements(GL15.GL_TRIANGLES, count + count / 2, object.getIndexObject().type().asGLType, 0);

        object.getFormat().clearBufferState();

        RenderSystem.popMatrix();
    }
}
