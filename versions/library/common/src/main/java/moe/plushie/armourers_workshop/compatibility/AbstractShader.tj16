package moe.plushie.armourers_workshop.compatibility;

import com.mojang.blaze3d.vertex.VertexFormat;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.compatibility.client.AbstractPoseStack;
import moe.plushie.armourers_workshop.core.client.other.SkinRenderObject;
import moe.plushie.armourers_workshop.core.client.other.VertexIndexBuffer;
import moe.plushie.armourers_workshop.core.client.shader.Shader;
import moe.plushie.armourers_workshop.core.client.shader.ShaderVertexGroup;
import moe.plushie.armourers_workshop.core.client.shader.ShaderVertexObject;
import moe.plushie.armourers_workshop.utils.RenderSystem;
import moe.plushie.armourers_workshop.utils.TickUtils;
import moe.plushie.armourers_workshop.utils.math.OpenPoseStack;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.client.renderer.RenderType;

@Available("[1.16, 1.18)")
@Environment(EnvType.CLIENT)
public class AbstractShader extends Shader {

    private int lastMaxVertexCount = 0;

    @Override
    public void begin() {
        super.begin();
        RenderSystem.enableRescaleNormal();
    }

    @Override
    public void end() {
        RenderSystem.disableRescaleNormal();
        SkinRenderObject.unbind();
        super.end();
    }

    @Override
    protected void prepare(ShaderVertexGroup group) {
        // apply changes of texture animation.
        RenderSystem.setExtendedTextureMatrix(group.getTextureMatrix(TickUtils.ticks()));

        lastMaxVertexCount = group.maxVertexCount;
        group.getRenderType().setupRenderState();
    }

    @Override
    protected void clean(ShaderVertexGroup group) {
        group.getRenderType().clearRenderState();
    }

    @Override
    public void render(ShaderVertexObject object) {
        VertexFormat vertexFormat = object.getFormat();
        AbstractLightBufferObject lightBuffer = null;

        if (!object.isGrowing()) {
            lightBuffer = AbstractLightBufferObject.getLightBuffer(object.getLightmap());
            lightBuffer.ensureCapacity(lastMaxVertexCount);
            lightBuffer.bind();
            lightBuffer.getFormat().setupBufferState(0L);
        }

        object.getVertexBuffer().bind();
        vertexFormat.setupBufferState(object.getVertexOffset());
        setupPolygonState(object);

        OpenPoseStack poseStack = object.getPoseStack();
        RenderSystem.pushMatrix();
        RenderSystem.multMatrix(AbstractPoseStack.convertMatrix(poseStack.last().pose()));
        RenderSystem.drawArrays(object.getType().mode(), 0, object.getVertexCount());
        RenderSystem.popMatrix();

        cleanPolygonState(object);
        vertexFormat.clearBufferState();

        if (lightBuffer != null) {
            lightBuffer.getFormat().clearBufferState();
        }
    }

    @Override
    protected void draw(RenderType renderType, VertexIndexBuffer.IndexType indexType, int count, int indices) {
        throw new AssertionError();
    }
}
