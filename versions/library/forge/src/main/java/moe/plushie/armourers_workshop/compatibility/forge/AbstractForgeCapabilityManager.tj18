package moe.plushie.armourers_workshop.compatibility.forge;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.common.ICapabilityType;
import moe.plushie.armourers_workshop.api.core.IResourceLocation;
import moe.plushie.armourers_workshop.api.data.IDataSerializerProvider;
import moe.plushie.armourers_workshop.api.registry.IRegistryHolder;
import moe.plushie.armourers_workshop.core.capability.SkinWardrobe;
import moe.plushie.armourers_workshop.core.data.DataManager;
import moe.plushie.armourers_workshop.utils.ObjectUtils;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.entity.Entity;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.CapabilityManager;
import net.minecraftforge.common.capabilities.CapabilityToken;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.capabilities.RegisterCapabilitiesEvent;
import net.minecraftforge.common.util.INBTSerializable;
import net.minecraftforge.common.util.LazyOptional;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.jetbrains.annotations.Nullable;

import java.lang.ref.WeakReference;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;

@Available("[1.18, 1.21)")
public class AbstractForgeCapabilityManager {

    public static <T> IRegistryHolder<ICapabilityType<T>> register(IResourceLocation registryName, Class<T> type, Function<Entity, Optional<T>> factory) {
        if (type == SkinWardrobe.class) {
            return ObjectUtils.unsafeCast(createWardrobeCapabilityType(registryName, ObjectUtils.unsafeCast(factory)));
        }
        throw new AssertionError();
    }

    private static IRegistryHolder<ICapabilityType<SkinWardrobe>> createWardrobeCapabilityType(IResourceLocation registryName, Function<Entity, Optional<SkinWardrobe>> provider) {
        Capability<SkinWardrobe> capability = CapabilityManager.get(new CapabilityToken<SkinWardrobe>() {
        });
        ICapabilityType<SkinWardrobe> capabilityType = entity -> entity.getCapability(capability).resolve();
        return new RegistryObjectProxy<>(registryName, SkinWardrobe.class, provider, capabilityType, () -> capability);
    }

    public static class RegistryObjectProxy<T extends IDataSerializerProvider> implements IRegistryHolder<ICapabilityType<T>> {

        final IResourceLocation registryName;
        final Supplier<Capability<T>> capability;

        final Class<T> type;
        final ICapabilityType<T> capabilityType;
        final Function<Entity, Optional<T>> factory;

        protected RegistryObjectProxy(IResourceLocation registryName, Class<T> type, Function<Entity, Optional<T>> factory, ICapabilityType<T> capabilityType, Supplier<Capability<T>> capability) {
            this.type = type;
            this.factory = factory;
            this.capability = capability;
            this.capabilityType = capabilityType;
            this.registryName = registryName;
            this.setupBus();
        }

        public void setupBus() {
            MinecraftForge.EVENT_BUS.addGenericListener(Entity.class, this::attachEntityCapability);
            FMLJavaModLoadingContext.get().getModEventBus().addListener(this::registerCapability);
        }

        public void registerCapability(RegisterCapabilitiesEvent event) {
            event.register(type);
//            CapabilityManager.INSTANCE.register(type, new Capability.IStorage<T>() {
//                @Override
//                public Tag writeNBT(Capability<T> capability, T object, Direction arg) {
//                    return null;
//                }
//
//                @Override
//                public void readNBT(Capability<T> capability, T object, Direction arg, Tag arg2) {
//                }
//            }, () -> null);
        }

        public void attachEntityCapability(AttachCapabilitiesEvent<Entity> event) {
            Optional<T> value = factory.apply(event.getObject());
            if (!value.isPresent()) {
                return;
            }
            event.addCapability(registryName.toLocation(), new CapabilityProviderProxy<T>(event.getObject(), value.get()) {
                @Override
                public Capability<T> getCapability() {
                    return capability.get();
                }
            });
        }

        @Override
        public ICapabilityType<T> get() {
            return capabilityType;
        }

        @Override
        public IResourceLocation getRegistryName() {
            return registryName;
        }
    }

    public static abstract class CapabilityProviderProxy<T extends IDataSerializerProvider> implements ICapabilityProvider, INBTSerializable<CompoundTag> {

        protected final T value;
        protected final WeakReference<Entity> entity;

        protected CapabilityProviderProxy(Entity entity, T value) {
            this.value = value;
            this.entity = new WeakReference<>(entity);
        }

        @Override
        public CompoundTag serializeNBT() {
            CompoundTag tag = new CompoundTag();
            value.serialize(DataManager.createEntityDataReader(entity.get(), tag));
            return tag;
        }

        @Override
        public void deserializeNBT(CompoundTag tag) {
            value.deserialize(DataManager.createEntityDataWriter(entity.get(), tag));
        }

        @Override
        public <I> LazyOptional<I> getCapability(Capability<I> cap, @Nullable Direction arg) {
            return getCapability().orEmpty(cap, LazyOptional.of(() -> value));
        }

        public abstract Capability<T> getCapability();
    }
}
