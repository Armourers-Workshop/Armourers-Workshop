package moe.plushie.armourers_workshop.compatibility.forge;

import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.api.network.IClientPacketHandler;
import moe.plushie.armourers_workshop.api.network.IFriendlyByteBuf;
import moe.plushie.armourers_workshop.api.network.IPacketDistributor;
import moe.plushie.armourers_workshop.api.network.IServerPacketHandler;
import moe.plushie.armourers_workshop.compatibility.core.data.AbstractFriendlyByteBuf;
import moe.plushie.armourers_workshop.init.ModConfig;
import moe.plushie.armourers_workshop.init.platform.NetworkManager;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.network.protocol.Packet;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.util.thread.BlockableEventLoop;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.level.chunk.LevelChunk;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.common.util.LogicalSidedProvider;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkEvent;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.network.event.EventNetworkChannel;
import org.apache.commons.lang3.tuple.Pair;

import java.util.function.Supplier;

@Available("[1.18, 1.21)")
public class AbstractForgeNetwork {

    public static class Dispatcher extends NetworkManager.Dispatcher {

        public Dispatcher(ResourceLocation channelName, String channelVersion) {
            super(channelName, channelVersion);
        }

        @Override
        public void register() {
            EventNetworkChannel channel = NetworkRegistry.ChannelBuilder
                    .named(channelName)
                    .networkProtocolVersion(() -> channelVersion)
                    .clientAcceptedVersions(sv -> true)
                    .serverAcceptedVersions(cv -> {
                        if (ModConfig.Common.enableProtocolCheck) {
                            return cv.equals(channelVersion);
                        }
                        return true;
                    })
                    .eventNetworkChannel();
            channel.registerObject(this);
        }

        @SubscribeEvent
        public void onServerEvent(final NetworkEvent.ClientCustomPayloadEvent event) {
            NetworkEvent.Context context = event.getSource().get();
            ServerPlayer player = context.getSender();
            if (player == null) {
                return;
            }
            IServerPacketHandler packetHandler = context::enqueueWork;
            AbstractFriendlyByteBuf payload = AbstractFriendlyByteBuf.wrap(event.getPayload());
            didReceivePacket(packetHandler, payload, player);
            context.setPacketHandled(true);
        }

        @SubscribeEvent
        @OnlyIn(Dist.CLIENT)
        public void onClientEvent(final NetworkEvent.ServerCustomPayloadEvent event) {
            if (event instanceof NetworkEvent.ServerCustomPayloadLoginEvent) {
                return;
            }
            NetworkEvent.Context context = event.getSource().get();
            IClientPacketHandler packetHandler = context::enqueueWork;
            AbstractFriendlyByteBuf payload = AbstractFriendlyByteBuf.wrap(event.getPayload());
            didReceivePacket(packetHandler, payload, null);
            context.setPacketHandled(true);
        }
    }

    public static class Distributor implements IPacketDistributor {

        private final PacketDistributor.PacketTarget target;
        private final Packet<?> packet;

        Distributor(PacketDistributor.PacketTarget target, Packet<?> packet) {
            this.target = target;
            this.packet = packet;
        }

        @Override
        public IPacketDistributor add(ResourceLocation channel, IFriendlyByteBuf buf) {
            NetworkDirection direction = target.getDirection();
            Packet<?> packet1 = direction.buildPacket(Pair.of((FriendlyByteBuf) buf.asByteBuf(), 0), channel).getThis();
            return new Distributor(target, packet1);
        }

        @Override
        public void execute() {
            if (packet == null) {
                return;
            }
            NetworkDirection direction = target.getDirection();
            BlockableEventLoop<?> executor = LogicalSidedProvider.WORKQUEUE.get(direction.getOriginationSide());
            executor.submitAsync(() -> target.send(packet));
        }

        @Override
        public boolean isClientbound() {
            return target.getDirection() == NetworkDirection.PLAY_TO_CLIENT;
        }
    }

    public static class Distributors implements NetworkManager.Distributors {

        @Override
        public IPacketDistributor trackingChunk(Supplier<LevelChunk> supplier) {
            return new Distributor(PacketDistributor.TRACKING_CHUNK.with(supplier), null);
        }

        @Override
        public IPacketDistributor trackingEntityAndSelf(Supplier<Entity> supplier) {
            return new Distributor(PacketDistributor.TRACKING_ENTITY_AND_SELF.with(supplier), null);
        }

        @Override
        public IPacketDistributor player(Supplier<ServerPlayer> supplier) {
            return new Distributor(PacketDistributor.PLAYER.with(supplier), null);
        }

        public IPacketDistributor allPlayers() {
            return new Distributor(PacketDistributor.ALL.noArg(), null);
        }

        public IPacketDistributor server() {
            return new Distributor(PacketDistributor.SERVER.noArg(), null);
        }
    }
}
