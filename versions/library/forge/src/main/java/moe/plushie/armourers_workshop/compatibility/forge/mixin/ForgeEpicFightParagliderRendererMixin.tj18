package moe.plushie.armourers_workshop.compatibility.forge.mixin;

import com.mojang.blaze3d.vertex.PoseStack;
import moe.plushie.armourers_workshop.api.annotation.Available;
import moe.plushie.armourers_workshop.init.platform.EventManager;
import moe.plushie.armourers_workshop.init.platform.event.client.RenderLivingEntityEvent;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.entity.LivingEntityRenderer;
import net.minecraft.world.entity.LivingEntity;
import net.minecraftforge.client.event.RenderLivingEvent;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Pseudo;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Available("[1.18, 1.19)")
@Pseudo
@Mixin(targets = "com.afunproject.dawncraft.integration.epicfight.client.EpicFightParagliderEvents")
public class ForgeEpicFightParagliderRendererMixin {

    @Inject(method = "renderLivingEventEnd", at = @At(value = "INVOKE", target = "Lnet/minecraftforge/client/event/RenderLivingEvent$Pre;setCanceled(Z)V"), remap = false)
    public void aw2$renderPre(RenderLivingEvent.Pre<? extends LivingEntity, ? extends EntityModel<? extends LivingEntity>> event, CallbackInfo ci) {
        // the original event has been canceled, so we need to call it manually.
        EventManager.post(RenderLivingEntityEvent.Pre.class, new RenderLivingEntityEvent.Pre() {
            @Override
            public float getPartialTicks() {
                return event.getPartialTick();
            }

            @Override
            public int getPackedLight() {
                return event.getPackedLight();
            }

            @Override
            public LivingEntity getEntity() {
                return event.getEntity();
            }

            @Override
            public LivingEntityRenderer<?, ?> getRenderer() {
                return event.getRenderer();
            }

            @Override
            public PoseStack getPoseStack() {
                return event.getPoseStack();
            }

            @Override
            public MultiBufferSource getMultiBufferSource() {
                return event.getMultiBufferSource();
            }
        });
    }
}
