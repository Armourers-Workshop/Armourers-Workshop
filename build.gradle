buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id "maven-publish"
    id "idea"
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "eclipse"

if (version == "unspecified") {
    version = "homebaked"
}

String semver = "${mod_version}-${version}"
group = artifact_group
version = "${minecraft_version}-${semver}"
archivesBaseName = artifact_basename

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mcp_channel, version: mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'armourers_workshop'

            property 'mixin.env.disableRefMap', 'true'

            arg "-mixin.config=armourers_workshop.mixin.json"

            mods {
                armourers_workshop {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'armourers_workshop'

            mods {
                armourers_workshop {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven { url = "https://maven.minecraftforge.net" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://modmaven.dev/" }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
     flatDir {
         dir 'run/mods-dev'
     }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compileOnly "mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api"
    //compileOnly "com.sk89q.worldedit:worldedit-core:7.2.5-SNAPSHOT"

    //runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    //runtimeOnly fg.deobf("com.sk89q.worldedit:worldedit-mod:7.2.5-dist")
    //runtimeOnly fg.deobf("noppes.npcs:CustomNPCs:1.16.5.20220622snapshot")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "armourers_workshop.refmap.json"
    config 'armourers_workshop.mixin.json'

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes(["Specification-Title"     : "Armourer's Workshop",
                    "Specification-Vendor"    : "armourers_workshop",
                    "Specification-Version"   : "${semver}", // We are version 1 of ourselves
                    "Implementation-Title"    : "${project.name}",
                    "Implementation-Version"  : "${semver}",
                    "Implementation-Vendor"   : "armourers_workshop",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

task apiJar(type: Jar) {
    classifier = "api"
    from(sourceSets.main.allJava) {
        include "moe/plushie/armourers_workshop/api/**"
    }
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from(sourceSets.main.allJava)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

artifacts {
    archives sourcesJar
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand 'version': semver,
                'minecraft_version': project.minecraft_version_range,
                'forge_version_range': project.forge_version_range
    }
}
