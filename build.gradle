buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}

plugins {
    id "maven-publish"
    id "idea"
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "eclipse"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://maven.minecraftforge.net" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

group = artifact_group
archivesBaseName = artifact_basename
version = project.minecraft_version + "-" + version_major + "." + version_minor + "." + version_patch + "-test"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

// ensure everything uses UTF-8 and not some random codepage chosen by gradle
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

mixin {
    add sourceSets.main, "armourers_workshop.refmap.json"
    config 'armourers_workshop.mixin.json'

    debug.verbose = true
    debug.export = true
}

minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'
            arg "-mixin.config=armourers_workshop.mixin.json"

            mods {
                armourers_workshop {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                armourers_workshop {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}


processResources {
    filesMatching("META-INF/mods.toml") {
        expand 'version': version_major + "." + version_minor + "." + version_patch,
                'minecraft_version': project.minecraft_version_range,
                'forge_version': project.forge_version_range
    }
}

jar {
    finalizedBy 'reobfJar'
	//finalizedBy 'signJar'

    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title"     : "Armourer's Workshop",
                "Specification-Vendor"    : "armourers_workshop",
                "Specification-Version"   : "${project.version}", // We are version 1 of ourselves
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "armourers_workshop",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    classifier = "api"
    from sourceSets.api.output
    include "moe/plushie/armourers_workshop/api/**"

    // TODO: when FG bug is fixed, remove allJava from the api jar.
    // https://github.com/MinecraftForge/ForgeGradle/issues/369
    // Gradle should be able to pull them from the -sources jar.
    from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
