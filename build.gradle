plugins {
    id "java"
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id 'dev.architectury.loom' version "1.0-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

rootProject.ext.searchFile = { sourceSets, filter -> sourceSets.collect { it.allSource }.collectMany { it.findAll(filter) } }
rootProject.ext.mixinConfigs = ["resolve": { name -> mixinConfigs.get("common") + mixinConfigs.get(name) }]

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.16.5+build.10:v2"
    }

    sourceSets.forEach {
        it.java.srcDirs("../versions/${rootProject.minecraft_version}/${project.name}/src/${it.name}/java")
        it.resources.srcDirs("../versions/${rootProject.minecraft_version}/${project.name}/src/${it.name}/resources")
        it.java.srcDirs("../versions/library/${project.name}/src/${it.name}/java")
        it.resources.srcDirs("../versions/library/${project.name}/src/${it.name}/resources")
    }

    // we need to search all source files to get to the actived mixins.
    mixinConfigs.put(project.name, searchFile(sourceSets, { it.name.endsWith("mixins.json") }))

    task signJar(dependsOn: remapSourcesJar) {
        onlyIf { System.getenv("AW_SIGN_STORE") != null }
        doLast {
            ant.signjar(destDir: "${remapJar.destinationDir}",
                    jar: "${remapJar.archivePath}",
                    alias: System.getenv("AW_SIGN_ALIAS"),
                    keypass: System.getenv("AW_SIGN_KEY_PASS"),
                    storepass: System.getenv("AW_SIGN_STORE_PASS"),
                    keystore: System.getenv("AW_SIGN_STORE"),
                    storetype: "jks")
        }
    }

    remapJar.finalizedBy(signJar)
}

allprojects {
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    if (version == "unspecified") {
        version = "homebaked"
    }

    if (version != "") {
        version = "${rootProject.mod_version}-${version}"
    }

    def uname = rootProject.archives_base_name.replaceAll("-", "")
    def jversion = rootProject.java_version as int

    group = rootProject.maven_group
    archivesBaseName = "${uname.toLowerCase()}-${project.name}-${rootProject.minecraft_version}"
    targetCompatibility = sourceCompatibility = jversion

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        compileOnly "systems.manifold:manifold-ext:${rootProject.manifold_version}"
        annotationProcessor "systems.manifold:manifold-ext:${rootProject.manifold_version}"
        testAnnotationProcessor "systems.manifold:manifold-ext:${rootProject.manifold_version}"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xplugin:Manifold no-bootstrap"
        if (jversion <= 8) {
            // in minecraft 1.16, it must use --release flags, to resolve:
            // java.lang.NoSuchMethodError: java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
            options.release = jversion
        }
    }

    java {
        withSourcesJar()
    }
}
